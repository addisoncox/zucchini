package internal

import (
	"fmt"
	"strings"
)

func HTMLForZucchiniMonitor(taskName string, monitorAddr string) string {
	strings.TrimSuffix(monitorAddr, "\\")
	return fmt.Sprintf("<!DOCTYPE html> <html lang='en'> <head> <meta charset='UTF-8'> <meta http-equiv='X-UA-Compatible' content='IE=edge'> <meta name='viewport' content='width=device-width, initial-scale=1.0'> <title>Zucchini Monitor</title> <!--https://www.w3schools.com/html/html_tables.asp--> <style> h1 { color: black; } body { background-color: rgb(249, 249, 249); } button { background-color: #4CAF50; /* Green */ border: none; color: white; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; } table { font-family: arial, sans-serif; border-collapse: collapse;  } td, th { border: 1px solid #dddddd; text-align: left; padding: 8px; } tr:nth-child(even) { background-color: #dddddd; } </style> </head> <body> <h1>Task: %s</h1> <button id='queued-toggle-button' onclick='toggleShowQueued()'>Queued</button> <div id='showQueued' style='visibility: visible; display: block;'> <div id='queued-table' style='background-color: rgb(248, 248, 244);'> </div> </div> <br/> <button id='processing-toggle-button' onclick='toggleShowProcessing()'>Processing</button> <div id='showProcessing' style='visibility: visible; display: block;'> <div id='processing-table' style='background-color: rgb(248, 248, 244)'> </div> </div> <br/> <button id='failed-toggle-button' onclick='toggleShowFailed()'>Failed</button> <div id='showFailed' style='visibility: visible; display: block;'> <div id='failed-table' style='background-color: rgb(248, 248, 244);'> </div> </div> <br/> <button id='succeeded-toggle-button' onclick='toggleShowSucceeded()'>Succeeded</button> <div id='showSucceeded' style='visibility: visible; display: block;'> <div id='succeeded-table' style='background-color: rgb(248, 248, 244);'> </div> </div> <br/> <button id='cancelled-toggle-button' onclick='toggleShowCancelled()'>Cancelled</button> <div id='showCancelled' style='visibility: visible; display: block;'> <div id='cancelled-table' style='background-color: rgb(248, 248, 244);'> </div> </div> <br/> </body> </html> <script > function toggleShowQueued() { showQueued = document.getElementById('showQueued'); showQueued.style.visibility = showQueued.style.visibility == 'visible' ? 'hidden' : 'visible'; showQueued.style.display = showQueued.style.display == 'block' ? 'none' : 'block'; }; function toggleShowProcessing() { showProcessing = document.getElementById('showProcessing'); showProcessing.style.visibility = showProcessing.style.visibility == 'visible' ? 'hidden' : 'visible'; showProcessing.style.display = showProcessing.style.display == 'block' ? 'none' : 'block'; }; function toggleShowFailed() { showFailed = document.getElementById('showFailed'); showFailed.style.visibility = showFailed.style.visibility == 'visible' ? 'hidden' : 'visible'; showFailed.style.display = showFailed.style.display == 'block' ? 'none' : 'block'; }; function toggleShowSucceeded() { showSucceeded = document.getElementById('showSucceeded'); showSucceeded.style.visibility = showSucceeded.style.visibility == 'visible' ? 'hidden' : 'visible'; showSucceeded.style.display = showSucceeded.style.display == 'block' ? 'none' : 'block'; }; function toggleShowCancelled() { showCancelled = document.getElementById('showCancelled'); showCancelled.style.visibility = showCancelled.style.visibility == 'visible' ? 'hidden' : 'visible'; showCancelled.style.display = showCancelled.style.display == 'block' ? 'none' : 'block'; }; function getTaskInfo() { fetch('http://%s/info') .then( function(response) { response.json() .then((tasksData) => { updateTaskDisplay(tasksData); }) }) .catch(function() { console.log('could not fetch tasks'); }); } function updateTaskDisplay(tasksData) { tableHeader = ` <table> <tr> <th>ID</th> <th>Args</th> <th>Retries</th> </tr> <tbody> `; queuedTasksTableHTML = [tableHeader]; processingTasksTableHTML = [tableHeader]; failedTasksTableHTML = [tableHeader]; succeededTasksTableHTML = [tableHeader]; cancelledTasksTableHTML = [tableHeader]; tasksData.sort( function(a, b){ return a['ID'].localeCompare(b['ID']); }); for (const taskData of tasksData) { tableDataString = ` <tr> <td>${taskData['ID']}</td> <td>${JSON.stringify(taskData['Arg'])}</td> <td>${taskData['Retries']}</td> </tr> `; ({ 'queued': queuedTasksTableHTML, 'processing': processingTasksTableHTML, 'failed': failedTasksTableHTML, 'succeeded': succeededTasksTableHTML, 'cancelled': cancelledTasksTableHTML }[taskData['Status']]).push(tableDataString); } if (queuedTasksTableHTML.length > 1) { queuedTasksTableHTMLString = queuedTasksTableHTML.join(''); document.getElementById('queued-table').innerHTML = queuedTasksTableHTMLString; } else { document.getElementById('queued-table').innerHTML = `No tasks`; } if (processingTasksTableHTML.length > 1) { processingTasksTableHTMLString = processingTasksTableHTML.join(''); document.getElementById('processing-table').innerHTML = processingTasksTableHTMLString; } else { document.getElementById('processing-table').innerHTML = `No tasks`; } if (failedTasksTableHTML.length > 1) { failedTasksTableHTMLString = failedTasksTableHTML.join(''); document.getElementById('failed-table').innerHTML =failedTasksTableHTMLString; } else { document.getElementById('failed-table').innerHTML = `No tasks`; } if (succeededTasksTableHTML.length > 1) { succeededTasksTableHTMLString = succeededTasksTableHTML.join(''); document.getElementById('succeeded-table').innerHTML = succeededTasksTableHTMLString; } else { document.getElementById('succeeded-table').innerHTML = `No tasks`; } if (cancelledTasksTableHTML.length > 1) { cancelledTasksTableHTMLString = cancelledTasksTableHTML.join(''); document.getElementById('cancelled-table').innerHTML = cancelledTasksTableHTMLString; } else { document.getElementById('cancelled-table').innerHTML = `No tasks`; } document.getElementById('queued-toggle-button').innerHTML = `Queued (${queuedTasksTableHTML.length - 1})`; document.getElementById('processing-toggle-button').innerHTML = `Processing (${processingTasksTableHTML.length - 1})`; document.getElementById('failed-toggle-button').innerHTML = `Failed (${failedTasksTableHTML.length - 1})`; document.getElementById('succeeded-toggle-button').innerHTML = `Succeeded (${succeededTasksTableHTML.length - 1})`; document.getElementById('cancelled-toggle-button').innerHTML = `Cancelled (${cancelledTasksTableHTML.length - 1})`; } setInterval(getTaskInfo, 1000); </script>", taskName, monitorAddr)
}
